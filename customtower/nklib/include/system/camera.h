//=============================================================================
/*!	@file	camera.h

	@brief	カメラクラス

	@author	井手 竜之介
	@date	2011/11/19
	@todo	なし
	@bug	なし
*/
//=============================================================================

#ifndef __CAMERA_H__
#define __CAMERA_H__

#include <list>
#include "../typedef.h"
#include "../math/vector.h"
#include "../math/matrix.h"




namespace nk {
namespace system {

typedef class NormalCamera	Light;	//!< 通常カメラをライトとしても扱う

typedef u32	CAMERA_ID;				//!< カメラID

//=============================================================================
/*!
								カメラ基底クラス
*/
//=============================================================================
class Camera {
public:

	//-----------------------型定義--------------------------
		

	//----------------------静的メンバ-----------------------
	
	
	//-----------------------メソッド------------------------

	//===========================================================================
	/*!	@brief		初期化
		@param	near			どこから表示するか
		@param	far				どこまで表示するか
		@param	fieldOfVision	視野角
	*/
	//===========================================================================
	virtual bool			Initialize( f32 near, f32 far, f32 fieldOfVision );
	
	//===========================================================================
	/*!	@brief		位置ベクトルをセット
	*/
	//===========================================================================
	virtual void			SetPos( const math::Vector& pos );

	//===========================================================================
	/*!	@brief		視点ベクトルをセット
	*/
	//===========================================================================
	virtual void			SetLook( const math::Vector& look );

	//===========================================================================
	/*!	@brief		上方向ベクトルをセット
	*/
	//===========================================================================
	virtual void			SetTop( const math::Vector& top );

	//===========================================================================
	/*!	@brief		位置ベクトルを取得
	*/
	//===========================================================================
	virtual math::Vector	GetPos() const;
	
	//===========================================================================
	/*!	@brief		視点ベクトルを取得
	*/
	//===========================================================================
	virtual math::Vector	GetLook() const;
	
	//===========================================================================
	/*!	@brief		上方向ベクトルを取得
	*/
	//===========================================================================
	virtual math::Vector	GetTop() const;

	//===========================================================================
	/*!	@brief		見えはじめの距離を設定
	*/
	//===========================================================================
	void					SetNearDistance( f32 near );

	//===========================================================================
	/*!	@brief		見え始めるまでの距離を取得
	*/
	//===========================================================================
	f32						GetNearDistance( void ) const	{ return m_near;			}

	//===========================================================================
	/*!	@brief		見えなくなる距離を設定
	*/
	//===========================================================================
	void					SetFarDistance( f32 far );

	//===========================================================================
	/*!	@brief		見えなくなる距離を取得
	*/
	//===========================================================================
	f32						GetFarDistance( void ) const	{ return m_far;				}

	//===========================================================================
	/*!	@brief		視野角を設定
	*/
	//===========================================================================
	void					SetFieldOfVision( f32 deg );

	//===========================================================================
	/*!	@brief		視野角を取得
	*/
	//===========================================================================
	f32						GetFieldOfVision( void ) const	{ return m_fieldOfVision;	}
	
	//===========================================================================
	/*!	@brief		IDを取得
	*/
	//===========================================================================
	CAMERA_ID				GetID() const { return m_id; }

	//===========================================================================
	/*!	@brief		カメラ行列を取得
	*/
	//===========================================================================
	virtual math::Matrix44 	GetCameraMatrix() = 0;
	

protected:
	//----------------------メンバ変数-----------------------
	math::Vector			m_pos;		//!< 位置ベクトル
	math::Vector			m_look;		//!< 視点ベクトル
	math::Vector			m_top;		//!< 上方向ベクトル
	CAMERA_ID				m_id;		//!< 個別ID

	f32						m_fieldOfVision;//!< 視野角
	f32						m_near;			//!< どれだけ離れた位置から表示するか
	f32						m_far;			//!< どれだけ離れた位置まで表示するか


private:
	//----------------------静的メンバ-----------------------
	static CAMERA_ID		m_gCameraID;	// カメラID


	//-----------------------メソッド------------------------
	
public:
	//-------------コンストラクタ・デストラクタ--------------
	 Camera();
	~Camera();
};


//=============================================================================
/*!
								通常カメラクラス
*/
//=============================================================================
class NormalCamera : public Camera {
public:
	//-----------------------型定義--------------------------
	

	//----------------------静的メンバ-----------------------
	
	
	//-----------------------メソッド------------------------

	//!	カメラ行列を取得
	virtual math::Matrix44 GetCameraMatrix( void );

	
private:
	//----------------------メンバ変数-----------------------
	
	
	//-----------------------メソッド------------------------
	
public:
	//-------------コンストラクタ・デストラクタ--------------
	 NormalCamera();
	~NormalCamera();
};



}	// namespace system
}	// namespace nk






#endif  // __CAMERA_H__


