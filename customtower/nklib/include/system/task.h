//=============================================================================
/*!	@file	task.h

	@brief	タスクベース

	@author	ryunosuke ide
	@date	2012.06.07
*/
//=============================================================================

#ifndef __TASK_H__
#define __TASK_H__

namespace nk {
namespace system {

//=============================================================================
/*!
					タスクインターフェース
*/
//=============================================================================
class Task {
public:
	//-----------------------型定義--------------------------
	static const u32		DEFAULT_PRIORITY	= 128;
	

	//----------------------静的メンバ-----------------------
	
	
	//-----------------------メソッド------------------------
	
	//===========================================================================
	/*!	@brief		実行
	*/
	//===========================================================================
	virtual	void		Execute( void* parentParam )		{ }

	//===========================================================================
	/*!	@brief		子供の更新
	*/
	//===========================================================================
	virtual void		UpdateChild( void* parentParam )	= 0;
	
	//===========================================================================
	/*!	@brief		子供を追加
	*/
	//===========================================================================
	virtual void		ConnectChild( Task* child )		= 0;

	//===========================================================================
	/*!	@brief		子供を切り離す
	*/
	//===========================================================================
	virtual void		DisconnectChild( Task* child )		= 0;
	virtual void		DisconnectAllChild( void )			= 0;
	
protected:

private:
	//----------------------メンバ変数-----------------------
	
	
	//-----------------------メソッド------------------------
	void	_Init();
	void	_Term();

public:
	//-------------コンストラクタ・デストラクタ--------------
			Task();
	virtual~Task();
};

}	// namespace system
}	// namespace nk







#endif  // __TASK_H__