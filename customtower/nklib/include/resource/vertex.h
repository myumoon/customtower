//=============================================================================
/*!	@file	vertex.h

	@brief	頂点データ格納クラス

	@author	井手 竜之介
	@date	2011/11/17
	@todo	なし
	@bug	なし
*/
//=============================================================================

#ifndef __VERTEX_H__
#define __VERTEX_H__


//-------------------------------インクルード-------------------------------
#include <vector>
#include <list>
#include "../math/vector.h"


namespace nk {
namespace resource {

//=============================================================================
/*!
								頂点格納クラス
*/
//=============================================================================
class Vertex {
public:
	//-----------------------型定義--------------------------
	

	//----------------------静的メンバ-----------------------
	
	
	//-----------------------メソッド------------------------

	//===========================================================================
	/*!	@brief		頂点数設定
	*/
	//===========================================================================
	void				Init( u32 size );

	//===========================================================================
	/*!	@brief		頂点を追加
	*/
	//===========================================================================
	void				Add( const math::Vector& pos );
	void				Add( f32 x, f32 y, f32 z );

	//===========================================================================
	/*!	@brief		頂点をクリア
	*/
	//===========================================================================
	void				Clear( void );

	//===========================================================================
	/*!	@brief		頂点を取得
	*/
	//===========================================================================
	const math::Vector&	GetVertex( u32 i ) const;
// 	const f32*			GetVertexPointer( void ) const;
// 	f32					GetX( u32 index ) const;

	//===========================================================================
	/*!	@brief		頂点数を取得
	*/
	//===========================================================================
	u32					GetSize() const;

	//===========================================================================
	/*!	@brief		コピー
	*/
	//===========================================================================
// 	void		operator=( const Vertex& );

private:
	//===========================================================================
	/*!	@brief		頂点追加
	*/
	//===========================================================================
	void				_Add( f32 x, f32 y, f32 z );
	
private:
	//----------------------メンバ変数-----------------------
	std::vector<math::Vector>	m_vertex;		//!< 頂点
// 	u32							m_size;			//!< 頂点数
	u32							m_addIndex;		//!< 追加インデックス

	//----------------------静的メンバ-----------------------
	static math::Vector			m_dummy;	// ダミー用
	
	
	//-----------------------メソッド------------------------
	
	
public:
	//-------------コンストラクタ・デストラクタ--------------
	 Vertex();
 	 Vertex( u32 size );
	 Vertex( const Vertex& );
	~Vertex();
};

}	// namespace resource
}	// namespace nk











#endif	// __VERTEX_H__