//=============================================================================
/*!	@file	threadFunc.h


	@brief	スレッド

	@author	ryunosuke ide
	@date	2012.09.08
*/
//=============================================================================

#ifndef __THREAD_FUNC_H__
#define __THREAD_FUNC_H__

#include <winsock2.h>
#include <windows.h>
#include <process.h>
#include <vector>
#include "../typedef.h"


#define	HANDLE_LIST_MAX		(128)		//!< ハンドル作成最大数
#define	THREAD_MAX			(32)		//!< スレッド数

namespace nk {

typedef u32 (*THREAD_FUNC)( void* );

#if defined(_WIN32)	// windows
//! スレッド関数

//! スレッドハンドル
typedef HANDLE				THREAD_HANDLE;

//! ミューテックスハンドル
typedef HANDLE				MUTEX_HANDLE;

//! 
typedef LPCRITICAL_SECTION	CRITICAL_SECTION_HANDLE;

//! イベントハンドル
//typedef HANDLE			EVENT_HANDLE;

//! スレッドID
typedef DWORD				THREAD_ID;

#else	// SDL

//! スレッドハンドル
typedef u32					THREAD_HANDLE;

//! ミューテックスハンドル
typedef u32					MUTEX_HANDLE;

//! クリティカルセクションハンドル
typedef void*				CRITICAL_SECTION_HANDLE;	// コンパイルエラーでるはず

//! スレッドID
typedef u32					THREAD_ID;
	
#endif

enum THREAD_STATE {
	THREAD_STATE_START,		//!< 開始
	THREAD_STATE_SUSPEND,	//!< 中断
	THREAD_STATE_WAIT,		//!< 待ち
};





//===========================================================================
/*!	@brief	スレッド初期化
	@param	----
	@return	----
*/
//===========================================================================
void			InitializeThread( void );


	
//===========================================================================
/*!	@brief	スレッド終了処理
	@param	----
	@return	----
*/
//===========================================================================
void			FinalizeThread( void );
	

//===========================================================================
/*!	@brief	スレッド生成
	@param	func		呼び出し関数
	@param	arg			スレッド関数引数
	@param	priority	優先度
	@param	stackSize	スタックサイズ(デフォルトで0)
	@return	生成したスレッドのハンドル
*/
//===========================================================================
THREAD_HANDLE	CreateThread( THREAD_FUNC func, void* arg, s32 priority = THREAD_PRIORITY_NORMAL, u32 stackSize = 0, const char* name = "" );
	

//===========================================================================
/*!	@brief	スレッド削除
	@param	handle		削除するスレッドのハンドル
	@return	----
*/
//===========================================================================
void			DestroyThread( THREAD_HANDLE handle );


	
//===========================================================================
/*!	@brief	スレッド開始
	@param	開始するスレッドハンドル
	@return	----
*/
//===========================================================================
void			StartThread( THREAD_HANDLE handle );



//===========================================================================
/*!	@brief	スレッド中断
	@param	中断するスレッドハンドル
	@return	----
*/
//===========================================================================
void			SuspendThread( THREAD_HANDLE handle );


//===========================================================================
/*!	@brief	スレッド再開
	@param	再開するスレッドハンドル
	@return	----
*/
//===========================================================================
void			ResumeThread( THREAD_HANDLE handle );

	
//===========================================================================
/*!	@brief	スレッド終了待機
	@param	待つスレッド
	@return	----
*/
//===========================================================================
void			JoinThread( THREAD_HANDLE handle );



//===========================================================================
/*!	@brief	ミューテックスの作成
	@param	----
	@return	生成したミューテックスのハンドル
*/
//===========================================================================
MUTEX_HANDLE	CreateMutexObject( void );



//===========================================================================
/*!	@brief	ミューテックスの削除
	@param	handle	削除するミューテックスのハンドル
	@return	----
*/
//===========================================================================
void			DeleteMutexObject( MUTEX_HANDLE handle );


//===========================================================================
/*!	@brief	ミューテックスをロック
	@param	handle	ロックを試みるミューテックス
	@return	true.ロック成功		false.失敗
*/
//===========================================================================
bool			LockMutex( MUTEX_HANDLE handle );


//===========================================================================
/*!	@brief	ミューテックスをアンロック
	@param	handle	アンロックを試みるミューテックス
	@return	true.アンロック成功		false.失敗
*/
//===========================================================================
bool			UnlockMutex( MUTEX_HANDLE handle );


//===========================================================================
/*!	@brief		クリティカルセクションの作成
	@param		----
	@return		----
*/
//===========================================================================
CRITICAL_SECTION_HANDLE	CreateCriticalSection( void );


//===========================================================================
/*!	@brief		クリティカルセクションの削除
	@param		handle	削除するクリティカルセクションハンドル
	@return		----
*/
//===========================================================================
void			DeleteCriticalSection( CRITICAL_SECTION_HANDLE handle );


//===========================================================================
/*!	@brief		クリティカルセクションのロック
	@param		クリティカルセクションハンドル
	@return		----
*/
//===========================================================================
void			LockCriticalSection( CRITICAL_SECTION_HANDLE handle );


//===========================================================================
/*!	@brief		クリティカルセクションのアンロック
	@param		クリティカルセクションハンドル
	@return		----
*/
//===========================================================================
void			UnlockCriticalSection( CRITICAL_SECTION_HANDLE handle );

//===========================================================================
/*!	@brief	全てのスレッドを停止させる
	@param	----
	@return	----
*/
//===========================================================================
void			SuspendAllThread( void );



//===========================================================================
/*!	@brief	全てのスレッドを以前の状態に戻す
	@param	----
	@return	----
*/
//===========================================================================
void			ReturnAllThread( void );


//===========================================================================
/*!	@brief	全てのスレッドを再開させる
	@param	----
	@return	----
*/
//===========================================================================
void			ResumeAllThread( void );

#if 0
//===========================================================================
/*!	@brief	イベントオブジェクトの作成
	@param	manualReset		手動リセットon,off
	@param	initialState	初期状態
	@param	addEventList	追加するイベントリストのID(デフォルトで0)
	@return	生成したイベントオブジェクトのハンドル
*/
//===========================================================================
EVENT_HANDLE	CreateEventObject( bool manualReset, bool initialState, HANDLE_CHUNK_ID addEventList = 0 );



//===========================================================================
/*!	@brief	イベントオブジェクトの削除
	@param	handle	削除するイベントオブジェクトのハンドル
	@return	----
*/
//===========================================================================
void			DeleteEventObject( EVENT_HANDLE handle );




//===========================================================================
/*!	@brief	全てのイベントがシグナル状態になるまで待つ
	@param	----
	@return	----
*/
//===========================================================================
bool			WaitEvent( HANDLE_CHUNK_ID id = 0 );
#endif
	

}	// namespace nk


#endif  // __THREAD_FUNC_H__