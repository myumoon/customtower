//=============================================================================
/*!	@file	mutex.h

	@brief	クリティカルセクション

	@author	ryunosuke ide
	@date	2013.05.13
*/
//=============================================================================

#ifndef __CRITICAL_SECTION_H__
#define __CRITICAL_SECTION_H__

#include "./threadFunc.h"

namespace nk {

//=============================================================================
/*!
								ミューテックス
*/
//=============================================================================
class CriticalSection {
public:
	//-----------------------型定義--------------------------
	

	//----------------------静的メンバ-----------------------
	
	
	//-----------------------メソッド------------------------

	//===========================================================================
	/*!	@brief		ロック
	*/
	//===========================================================================
	void				Lock( void );

	//===========================================================================
	/*!	@brief		アンロック
	*/
	//===========================================================================
	void				Unlock( void );

	//===========================================================================
	/*!	@brief		コピー
	*/
	//===========================================================================
	CriticalSection&	operator =( const CriticalSection& rhs );
	
private:
	//-----------------------メソッド------------------------
	// 生成
	void			_Create( void );

	// 削除
	void			_Delete( void );

	// コピー
	void			_Copy( const CriticalSection& rhs);

	// 終了処理
	void			_Term( void );

	//----------------------メンバ変数-----------------------
	s32							m_copyCount;	//!< コピーカウンタ
	CRITICAL_SECTION_HANDLE		m_handle;		//!< ハンドル

	

public:
	//-------------コンストラクタ・デストラクタ--------------
			CriticalSection();
			CriticalSection( CRITICAL_SECTION_HANDLE handle );
			CriticalSection( const CriticalSection& rhs );
	virtual~CriticalSection();
	
private:
	
};

	
}	// namespace nk






#endif  // __CRITICAL_SECTION_H__