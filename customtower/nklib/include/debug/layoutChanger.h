//=============================================================================
/*!	@file	layoutChanger.h

	@brief	レイアウト編集

	@author	ryunosuke ide
	@date	2013.06.11
*/
//=============================================================================


#ifndef __LAYOUT_CHANGER_H__
#define __LAYOUT_CHANGER_H__

#include <vector>

#include "../graphics/graphics.h"
#include "../general.h"


namespace nk {

namespace graphics {
class Layout;
}

//=============================================================================
/*!
								レイアウト編集
	@note	シングルトン
*/
//=============================================================================
class LayoutChanger {
public:
	//-----------------------型定義--------------------------
	struct LayoutData {
		graphics::Layout*			layout;			//!< レイアウト
// 		bool			activeBackup;	//!< アクティブ状態バックアップ

		LayoutData( graphics::Layout* layout ) {
			this->layout	= layout;
		}

		bool operator==( const LayoutData& rhs ) const {
			return this->layout == rhs.layout;
		}
		bool operator!=( const LayoutData& rhs ) const {
			return this->layout != rhs.layout;
		}
	};
	typedef std::vector<LayoutData>		VecLayoutData;
	

	//----------------------静的メンバ-----------------------
	
	
	//-----------------------メソッド------------------------

	//===========================================================================
	/*!	@brief		編集レイアウト登録
	*/
	//===========================================================================
	void					RegisterLayout( graphics::Layout* layout );

	//===========================================================================
	/*!	@brief		レイアウト登録解除
	*/
	//===========================================================================
	void					RemoveLayout( graphics::Layout* layout );

	//===========================================================================
	/*!	@brief		レイアウト変更開始
	*/
	//===========================================================================
	void					Start( void );

	//===========================================================================
	/*!	@brief		終了
	*/
	//===========================================================================
	bool					End( void );

	//===========================================================================
	/*!	@brief		更新
	*/
	//===========================================================================
	void					Update( void );

	//===========================================================================
	/*!	@brief		描画
	*/
	//===========================================================================
	void					Draw( void );

	//===========================================================================
	/*!	@brief		初期化
	*/
	//===========================================================================
	static void				Initialize( void )
	{
		if( !m_instance ) {
			m_instance = new LayoutChanger();
		}
	}

	//===========================================================================
	/*!	@brief		終了
	*/
	//===========================================================================
	static void				Terminate( void )
	{
		SafeDelete( m_instance );
	}

	//===========================================================================
	/*!	@brief		インスタンス取得
	*/
	//===========================================================================
	static LayoutChanger*	GetInstance( void )
	{
		NULL_ASSERT( m_instance );
		return m_instance;
	}

protected:
	//===========================================================================
	/*!	@brief		レイアウト保存
	*/
	//===========================================================================
	void					Save( void );
	
private:
	//-----------------------メソッド------------------------
	
	//===========================================================================
	/*!	@brief		セーブ
	*/
	//===========================================================================
	void	_Save( graphics::Layout* layout );
	
	
	void	_Init( void );
	void	_Term( void );

	//----------------------メンバ変数-----------------------
	VecLayoutData			m_updateLayout;		//!< 更新レイアウト
	bool					m_layoutChange;		//!< レイアウト変更中はtrue
	
	//! インスタンス
	static LayoutChanger*	m_instance;

public:
	//-------------コンストラクタ・デストラクタ--------------
			LayoutChanger();
	virtual~LayoutChanger();
};


	
}	// namespace nk



#endif  // __LAYOUT_CHANGER_H__