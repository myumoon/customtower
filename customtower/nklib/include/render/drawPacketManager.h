//=============================================================================
/*!	@file	drawPacketManager.h

	@brief	描画パケット管理

	@author	ryunosuke ide
	@date	2013.06.22
	
	@note	drawPacketの生成を行うとVertexやFaceの生成に時間がかかるので
			ゲーム初期化時に一気に初期化しておく。
*/
//=============================================================================

#ifndef __DRAW_PACKET_MANAGER_H__
#define __DRAW_PACKET_MANAGER_H__

#include "../typedef.h"
#include "drawPacket.h"

//#define __DRAWPACKETMANAGER_USE_VECTOR	// これを定義すると配列ではなくvectorで管理

namespace nk {

namespace graphics {

class renderManager;

//=============================================================================
/*!
						描画パケット管理
*/
//=============================================================================
class DrawPacketManager {
public:
	//-----------------------型定義--------------------------
	

	//----------------------静的メンバ-----------------------
	static const u32	DEFAULT_MAX_PACKET	= 2048;		//!< デフォルト最大パケット数
	
	//-----------------------メソッド------------------------

	//===========================================================================
	/*!	@brief		初期化
	*/
	//===========================================================================
	void			Initialize( u32 maxPacket = DEFAULT_MAX_PACKET );

	//===========================================================================
	/*!	@brief		終了
	*/
	//===========================================================================
	void			Terminate( void );

	//===========================================================================
	/*!	@brief		使用可能パケット番号を初期化
	*/
	//===========================================================================
	void			ChangeStateDisuseAllPacket( void );

	//===========================================================================
	/*!	@brief		使用可能パケットを取得
	*/
	//===========================================================================
	DrawPacket&		PopDrawPacket( void );

	//===========================================================================
	/*!	@brief		描画マネージャーに送信
	*/
	//===========================================================================
	void			SendToDrawManager( const DrawPacket& packet );

	//===========================================================================
	/*!	@brief		描画マネージャー設定
	*/
	//===========================================================================
	void			SetRenderManager( RenderManager* renderManager ) { m_renderManager = renderManager; }
private:
	//-----------------------メソッド------------------------
	void	_Init( void );
	void	_Term( void );

	//----------------------メンバ変数-----------------------
#if defined(__DRAWPACKETMANAGER_USE_VECTOR)
 	std::vector<DrawPacket>			m_packets;			//!< 描画パケット
#else
	DrawPacket*						m_packets;			//!< 描画パケット
#endif
	u32								m_packetsSize;		//!< サイズ
	u32								m_usablePacket;		//!< 使用可能パケット番号
	RenderManager*					m_renderManager;	//!< 描画マネージャー
	
public:
	//-------------コンストラクタ・デストラクタ--------------
			DrawPacketManager();
	virtual~DrawPacketManager();
};


}	// namespace graphics
}	// namespace nk





#endif  // __DRAW_PACKET_MANAGER_H__