//=============================================================================
/*!	@file	autoTime.h

	@brief	自動時間測定

	@author	ryunosuke ide
	@date	2013.06.22
*/
//=============================================================================

//-------------------------------インクルード-------------------------------
#include <stdlib.h>
#include <string.h>
#include "../../include/utility/autoTime.h"
#include "../../include/general.h"


//--------------------------------define定義--------------------------------



//--------------------------------static変数--------------------------------
namespace {

}	// unnamed

//--------------------------------static関数--------------------------------
namespace {

}	// unnamed

//---------------------------------関数定義---------------------------------


namespace nk {

//===========================================================================
/*!	@brief	コンストラクタ
	@param	print	printf
*/
//===========================================================================
AutoTime::AutoTime( const char* label )
{
	_Init();
	
	if( label ) {
		strcpy_s( m_label, sizeof(m_label), label );
	}
}


//===========================================================================
/*!	@brief	デストラクタ
	@param	----
*/
//===========================================================================
AutoTime::~AutoTime( void )
{
	_Term();
}


//===========================================================================
/*!	@brief	初期化
	@param	----
	@return	----
*/
//===========================================================================
void AutoTime::_Init( void )
{
	memset( m_label, 0, sizeof(m_label) );
	m_startTime	= GetTimeMillSec();
}


//===========================================================================
/*!	@brief	終了処理
	@param	----
	@return	----
*/
//===========================================================================
void AutoTime::_Term( void )
{
	u64	time	= GetTimeMillSec() - m_startTime;

	if( m_label[0] ) {
		PRINTF("Time[%s] : %lu\n", m_label, time );
	}
	else {
		PRINTF("Time : %lu\n", time );
	}
}


	
}	// namespace nk
