//=============================================================================
/*!	@file	face.h

	@brief	面クラス

	@author	井手 竜之介
	@date	2011/11/18
	@todo	なし
	@bug	なし
*/
//=============================================================================

//-------------------------------インクルード-------------------------------
#include "../../include/resource/face.h"



namespace nk {
namespace resource {

//===========================================================================
/*!	@brief	コンストラクタ
	@param	なし
*/
//===========================================================================
Face::Face() : m_bundle(3)
{
// 	m_faceAry.reserve( 1024 );
// 	m_uvAry.reserve( 1024 );

	m_faceAddIndex	= 0;
	m_uvAddIndex	= 0;
}


//===========================================================================
/*!	@brief	デストラクタ
	@param	
*/
//===========================================================================
Face::~Face()
{
	
}


//===========================================================================
/*!	@brief		クリア
	@param		----
	@return		----
*/
//===========================================================================
void Face::Clear( void )
{
// 	m_faceAry.clear();
// 	m_uvAry.clear();
	m_bundle		= 3;
	m_uvAddIndex	= 0;
	m_faceAddIndex	= 0;
}

//===========================================================================
/*!	@brief	面とUVをセット
	@param	index	: セットする面頂点
	@param	uv		: UV座標
	@return	なし
*/
//===========================================================================
void Face::AddFaceUV( u32 index, const nk::math::Vector &uv )
{
	_AddFace( index );
	_AddUV( uv.x, uv.y );
}

//===========================================================================
/*!	@brief	面とUVをセット
	@param	index	: セットする面頂点
	@param	uv		: UV座標
	@return	なし
*/
//===========================================================================
void Face::AddFaceUV( u32 index, f32 u, f32 v )
{
	_AddFace( index );
	_AddUV( u, v );
}


//===========================================================================
/*!	@brief	面とUVをセット
	@param	index	: セットする面頂点
	@return	なし
*/
//===========================================================================
void Face::AddFace(u32 index)
{
	_AddFace( index );
}


//===========================================================================
/*!	@brief	面とUVをセット
	@param	uv		: UV座標
	@return	なし
*/
//===========================================================================
void Face::AddUV(const nk::math::Vector &uv)
{
	_AddUV( uv.x, uv.y );
}


//===========================================================================
/*!	@brief	面頂点を取得
	@param	index	: 何番目の頂点インデックスが欲しいか
	@return	頂点のインデックス
*/
//===========================================================================
u32 Face::GetFace(u32 index) const
{
	INDEX_ASSERT( index, m_faceAddIndex, "error" );
	
	return m_faceAry.at( index );
}


//===========================================================================
/*!	@brief	UV座標を取得
	@param	index	: 何番目のUV座標が欲しいか
	@return	UV座標
*/
//===========================================================================
const math::Vector& Face::GetUV(u32 index) const
{
	INDEX_ASSERT( index, m_uvAddIndex, "error" );
	
	return m_uvAry.at( index );
}


//===========================================================================
/*!	@brief	面を構成する頂点数をセット
	@param	num	: 何頂点で1つの面を形成するか(デフォルトで3)
	@return	なし
*/
//===========================================================================
void Face::SetBundle(u32 num)
{
	m_bundle = num;
}


//===========================================================================
/*!	@brief	何頂点で1つの面を構成するかを取得
	@param	なし
	@return	1つの面を構成する頂点数
*/
//===========================================================================
u32 Face::GetBundle() const
{
	return m_bundle;
}

//===========================================================================
/*!	@brief	頂点数を取得
	@param	なし
	@return	頂点数
*/
//===========================================================================
u32 Face::GetSize() const
{
	return m_faceAddIndex;
}


//===========================================================================
/*!	@brief		面追加
	@param		index	面インデックス
	@return		----
*/
//===========================================================================
void Face::_AddFace( u32 index )
{
	if( m_faceAry.size() <= m_faceAddIndex ) {
		m_faceAry.resize( m_faceAry.size() + ADD_ARRAY_LENGTH );
	}
	
	m_faceAry[m_faceAddIndex]	= index;
	++m_faceAddIndex;
}


//===========================================================================
/*!	@brief		面追加
	@param		index	面インデックス
	@return		----
*/
//===========================================================================
void Face::_AddUV( f32 u, f32 v )
{
	if( m_uvAry.size() <= m_uvAddIndex ) {
		m_uvAry.resize( m_uvAry.size() + ADD_ARRAY_LENGTH );
	}
	
	m_uvAry[m_uvAddIndex].SetVector( u, v, 0.0f );
	++m_uvAddIndex;
}


}	// namespace resource
}	// namespace nk