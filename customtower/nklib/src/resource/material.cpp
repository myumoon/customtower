//=============================================================================
/*!	@file	material.cpp

	@brief	マテリアルクラス

	@author	井手 竜之介
	@date	2011/11/15
	@todo	なし
	@bug	なし
*/
//=============================================================================


//-------------------------------インクルード-------------------------------
#include "../../include/resource/material.h"


namespace nk {
namespace resource {

//===========================================================================
/*!	@brief	コンストラクタ
	@param	
*/
//===========================================================================
Material::Material() :
		m_materialNum(0),
		m_color(),
		m_texture(NULL),
		m_diffuse(),
		m_ambient(),
		m_specular()
{
	
}


//===========================================================================
/*!	@brief	コピーコンストラクタ
	@param	
*/
//===========================================================================
Material::Material(const Material& obj) :
		m_materialNum(obj.m_materialNum),
		m_color(obj.m_color),
		m_texture(obj.m_texture),
		m_diffuse(obj.m_diffuse),
		m_ambient(obj.m_ambient),
		m_specular(obj.m_specular),
		m_shaderData(obj.m_shaderData)
{
	
}


//===========================================================================
/*!	@brief	デストラクタ
	@param	
*/
//===========================================================================
Material::~Material()
{
	
}


//===========================================================================
/*!	@brief		クリア
	@param		----
	@return		----
*/
//===========================================================================
void Material::Clear( void )
{
	m_materialNum	= 0;
	m_color			= Color();
	m_texture		= NULL;
	m_diffuse		= Color();
	m_ambient		= Color();
	m_specular		= Color();
	m_shaderData	= graphics::ShaderData();
}

//===========================================================================
/*!	@brief	テクスチャをセット
	@param	tex	: セットするテクスチャ
	@return	なし
*/
//===========================================================================
void Material::SetTexture(const Texture* tex)
{
	m_texture = tex;
}


//===========================================================================
/*!	@brief	テクスチャを取得
	@param	なし
	@return	テクスチャ
*/
//===========================================================================
const Texture* Material::GetTexture() const
{
	return m_texture;
}


//===========================================================================
/*!	@brief	マテリアル識別番号をセット
	@param	num	: マテリアル識別番号
	@return	なし
*/
//===========================================================================
void Material::SetMaterialNum(u32 num)
{
	m_materialNum = num;
}


//===========================================================================
/*!	@brief	マテリアル識別番号を取得
	@param	なし
	@return	識別番号
*/
//===========================================================================
u32 Material::GetMaterialNum() const
{
	return m_materialNum;
}


//===========================================================================
/*!	@brief	色をセット
	@param	color	: セットする色
	@return	なし
*/
//===========================================================================
void Material::SetColor(const Color &color)
{
	m_color = color;
}


//===========================================================================
/*!	@brief	色の取得
	@param	なし
	@return	色
*/
//===========================================================================
Color Material::GetColor() const
{
	return m_color;
}


//===========================================================================
/*!	@brief	ディフューズをセット
	@param	dif	: ディフューズ
	@return	なし
*/
//===========================================================================
void Material::SetDiffuse(const Color &dif)
{
	m_diffuse = dif;
}


//===========================================================================
/*!	@brief	ディフューズを取得
	@param	なし
	@return	ディフューズ
*/
//===========================================================================
Color Material::GetDiffuse() const
{
	return m_diffuse;
}


//===========================================================================
/*!	@brief	アンビエントをセット
	@param	amb	: アンビエント
	@return	なし
*/
//===========================================================================
void Material::SetAmbient(const Color &amb)
{
	m_ambient = amb;
}


//===========================================================================
/*!	@brief	アンビエントを取得
	@param	なし
	@return	アンビエント
*/
//===========================================================================
Color Material::GetAmbient() const
{
	return m_ambient;
}


//===========================================================================
/*!	@brief	スペキュラーをセット
	@param	spec	: スペキュラー
	@return	なし
*/
//===========================================================================
void Material::SetSpecular(const Color &spec)
{
	m_specular = spec;
}


//===========================================================================
/*!	@brief	スペキュラーを取得
	@param	なし
	@return	スペキュラー
*/
//===========================================================================
Color Material::GetSpecular() const
{
	return m_specular;
}


//===========================================================================
/*!	@brief	シェーダーデータをセット
	@param	data	: シェーダーデータ
	@return	なし
*/
//===========================================================================
void Material::SetShaderData(const nk::graphics::ShaderData &data)
{
	m_shaderData = data;
}


//===========================================================================
/*!	@brief	シェーダーデータを習得
	@param	なし
	@return	シェーダーデータ
*/
//===========================================================================
graphics::ShaderData Material::GetShaderData() const
{
	return m_shaderData;
}


//シェーダーをセット


}	// namespace resource
}	// namespace nk



#if 0
//===============================================
//	定数
//===============================================
const s32 CMaterial::FACE_SET = 3;			// 何頂点で1つの面を構成するか



//========================================================================
//	クラス：CMaterial
//	内　容：コンストラクタ
//	引　数：なし
//	戻り値：なし
//	 memo ：
//========================================================================
CMaterial::CMaterial()
{

Init();

}





//========================================================================
//	クラス：CMaterial
//	内　容：デストラクタ
//	引　数：なし
//	戻り値：なし
//	 memo ：
//========================================================================
CMaterial::~CMaterial()
{

SafeDelete(m_index);
SafeDelete(m_uv);

}




//========================================================================
//	クラス：CMaterial
//	内　容：初期化
//	引　数：なし
//	戻り値：なし
//	 memo ：
//========================================================================
void CMaterial::Init()
{

m_index = NULL;
m_uv = NULL;
m_uv_idx = 0;
m_index_idx = 0;
m_face_max = 0;
m_texture = NULL;

}




//========================================================================
//	クラス：CMaterial
//	内　容：面をセット
//	引　数：num	: 面の数
//	戻り値：なし
//	 memo ：
//========================================================================
void CMaterial::SetFaceNum(s32 num)
{

m_face_max = num;

m_index = new s32[num * FACE_SET];
m_uv = new tUV[num * FACE_SET];

}



//========================================================================
//	クラス：CMaterial
//	内　容：識別キーをセット
//	引　数：name	: 識別キー
//	戻り値：なし
//	 memo ：
//========================================================================
void CMaterial::SetKey(string key)
{

m_key = key;

}



//========================================================================
//	クラス：CMaterial
//	内　容：頂点インデックスをセット
//	引　数：num	: 設定するインデックス番号
//	戻り値：なし
//	 memo ：
//========================================================================
void CMaterial::SetIndex(s32 num)
{
if(m_index_idx < m_face_max * FACE_SET) {
m_index[m_index_idx] = num;
m_index_idx++;
}

}



//========================================================================
//	クラス：CMaterial
//	内　容：UVをセット
//	引　数：u, v	: 設定するUV座標
//	戻り値：なし
//	 memo ：
//========================================================================
void CMaterial::SetUV(f32 u, f32 v)
{

if(m_uv_idx < m_face_max * FACE_SET) {
m_uv[m_uv_idx].u = u;
m_uv[m_uv_idx].v = v;
m_uv_idx++;
}

}



//========================================================================
//	クラス：CMaterial
//	内　容：テクスチャのセット
//	引　数：texture	: テクスチャクラスへのポインタ
//	戻り値：なし
//	 memo ：
//========================================================================
void CMaterial::SetTexture(CTexture *texture)
{

m_texture = texture;

}



//========================================================================
//	クラス：CMaterial
//	内　容：コンソールに表示
//	引　数：なし
//	戻り値：なし
//	 memo ：
//========================================================================
void CMaterial::Disp()
{

for(s32 i = 0; i < 5; i++) {
PRINTF("idx(%d %d %d)\nUV(%f %f %f %f %f %f)\n\n",
	m_index[i * 3 + 0], m_index[i * 3 + 1], m_index[i * 3 + 2],
	m_uv[i * 3 + 0].u, m_uv[i * 3 + 0].v,
	m_uv[i * 3 + 1].u, m_uv[i * 3 + 1].v,
	m_uv[i * 3 + 2].u, m_uv[i * 3 + 2].v);
}

}

#endif