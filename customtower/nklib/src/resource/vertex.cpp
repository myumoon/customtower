//=============================================================================
/*!	@file	vertex.h

	@brief	頂点データ格納クラス

	@author	井手 竜之介
	@date	2011/11/17
	@todo	なし
	@bug	なし
*/
//=============================================================================

//-------------------------------インクルード-------------------------------
#include "../../include/resource/vertex.h"
#include "../../include/general.h"


namespace nk {
namespace resource {

//------------------------------静的メンバ定義------------------------------
math::Vector	Vertex::m_dummy;


//===========================================================================
/*!	@brief	コンストラクタ
	@param	なし
*/
//===========================================================================
Vertex::Vertex()
{
// 	m_size		= 0;
	m_addIndex	= 0;
}


//===========================================================================
/*!	@brief	コンストラクタ
	@param	size	サイズ
*/
//===========================================================================
Vertex::Vertex( u32 size )
{
// 	m_size		= size;
	m_addIndex	= 0;

	Init( size );
}


//===========================================================================
/*!	@brief	コンストラクタ
	@param	なし
*/
//===========================================================================
Vertex::Vertex( const Vertex& v )
{
	m_vertex	= v.m_vertex;
// 	m_size		= v.m_size;
	m_addIndex	= v.m_addIndex;
}


//===========================================================================
/*!	@brief	デストラクタ
	@param	なし
*/
//===========================================================================
Vertex::~Vertex()
{
	
}


//===========================================================================
/*!	@brief		初期化
	@param		size	領域サイズ
	@return		----
*/
//===========================================================================
void Vertex::Init( u32 size )
{
	Clear();
	if( m_vertex.size() < size ) {
		m_vertex.resize( size );
	}
}
	

//===========================================================================
/*!	@brief	頂点を追加
	@param	pos	: 位置
	@return	なし
*/
//===========================================================================
void Vertex::Add( const math::Vector& vec )
{
	_Add( vec.x, vec.y, vec.z );
}


//===========================================================================
/*!	@brief	頂点を追加
	@param	x,y,z	: 位置
	@return	なし
*/
//===========================================================================
void Vertex::Add( f32 x, f32 y, f32 z )
{
	_Add( x, y, z );
}


//===========================================================================
/*!	@brief	頂点を削除
	@param	----
	@return	----
	@note	確保した領域は開放しない
*/
//===========================================================================
void Vertex::Clear( void )
{
// 	m_vertex.clear();
// 	m_size = 0;
	m_addIndex	= 0;
	
}


//===========================================================================
/*!	@brief	頂点を取得
	@param	i	: 取得する頂点番号
	@return	頂点
*/
//===========================================================================
const math::Vector& Vertex::GetVertex( u32 i ) const
{
	INDEX_ASSERT( i, m_addIndex, "error" );

#if !defined(_DEBUG)
	// リリース時はエラーでないようにする
	{
		if( m_addIndex <= i ) {
			return m_dummy;
		}
	}
#endif

	return m_vertex.at(i);
}


//===========================================================================
/*!	@brief	頂点数を取得
	@param	なし
	@return	頂点数
*/
//===========================================================================
u32 Vertex::GetSize() const
{
	return m_addIndex;
}


//===========================================================================
/*!	@brief		頂点追加
	@param		x, y, z		頂点
	@return		----
*/
//===========================================================================
void Vertex::_Add( f32 x, f32 y, f32 z )
{
// 	ASSERT( m_addIndex < m_vertex.size(), "buffer over" );

	if( m_vertex.size() <= m_addIndex ) {
		m_vertex.resize( m_vertex.size() + 1024 );
	}

	m_vertex[m_addIndex].SetVector( x, y, z );
	++m_addIndex;
}

	
}	// namespace resource
}	// namespace nk

