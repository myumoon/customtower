//=============================================================================
/*!	@file	criticalSection.h

	@brief	クリティカルセクション

	@author	ryunosuke ide
	@date	2013.03.10
*/
//=============================================================================

//-------------------------------インクルード-------------------------------
#include "../../include/thread/criticalSection.h"


//--------------------------------define定義--------------------------------



//--------------------------------static変数--------------------------------
namespace {

}	// unnamed

//--------------------------------static関数--------------------------------
namespace {

}	// unnamed

//---------------------------------関数定義---------------------------------

namespace nk {

//===========================================================================
/*!	@brief	コンストラクタ
	@param	----
*/
//===========================================================================
CriticalSection::CriticalSection()
{
	m_copyCount	= 0;
	_Create();
}


//===========================================================================
/*!	@brief	コンストラクタ
	@param	----
*/
//===========================================================================
CriticalSection::CriticalSection( CRITICAL_SECTION_HANDLE handle )
{
	m_copyCount	= 1;
	m_handle	= handle;
}



//===========================================================================
/*!	@brief	コンストラクタ
	@param	----
*/
//===========================================================================
CriticalSection::CriticalSection( const CriticalSection& rhs )
{
	_Copy( rhs );
}


//===========================================================================
/*!	@brief	デストラクタ
	@param	----
*/
//===========================================================================
CriticalSection::~CriticalSection()
{
	_Term();
}


//===========================================================================
/*!	@brief	終了処理
	@param	----
	@return	----
*/
//===========================================================================
void CriticalSection::_Term()
{
	if( m_copyCount == 0 ) {
		_Delete();
	}
}


//===========================================================================
/*!	@brief	コピー
	@param	----
	@return	----
*/
//===========================================================================
void CriticalSection::_Copy( const CriticalSection& rhs )
{
	m_copyCount	= rhs.m_copyCount + 1;
	m_handle	= rhs.m_handle;

}


//===========================================================================
/*!	@brief	コピー
	@param	----
	@return	----
*/
//===========================================================================
CriticalSection& CriticalSection::operator =( const CriticalSection& rhs )
{
	_Copy( rhs );

	return *this;
}



//===========================================================================
/*!	@brief	ロック
	@param	----
	@return	----
*/
//===========================================================================
void CriticalSection::Lock( void )
{

	nk::LockCriticalSection( m_handle );
	
}


//===========================================================================
/*!	@brief	アンロック
	@param	----
	@return	----
*/
//===========================================================================
void CriticalSection::Unlock( void )
{

	nk::UnlockCriticalSection( m_handle );
	
}


//===========================================================================
/*!	@brief	生成
	@param	----
	@return	----
*/
//===========================================================================
void CriticalSection::_Create( void )
{
	m_handle	= nk::CreateCriticalSection();
	
}



//===========================================================================
/*!	@brief	削除
	@param	----
	@return	----
*/
//===========================================================================
void CriticalSection::_Delete( void )
{
	nk::DeleteCriticalSection( m_handle );
	
}


}	// namespace nk

