//=============================================================================
/*!	@file	camera.h

	@brief	カメラクラス

	@author	井手 竜之介
	@date	2011/11/19
	@todo	なし
	@bug	なし
*/
//=============================================================================

#include "../../include/system/camera.h"
#include "../../include/general.h"


namespace nk {
namespace system {


	

unsigned Camera::m_gCameraID		= 0;

//===========================================================================
/*!	@brief	コンストラクタ
	@param	なし
*/
//===========================================================================
Camera::Camera() : 
	m_pos(0.0f, 0.0f, 1.0f),
	m_look(0.0f, 0.0f, 0.0f),
	m_top(0.0f, 1.0f, 0.0f),
	m_fieldOfVision( 60.0f ),
	m_near(0.1f),
	m_far(1000.0f)
{
	m_id = ++m_gCameraID;			
}


//===========================================================================
/*!	@brief	デストラクタ
	@param	
*/
//===========================================================================
Camera::~Camera()
{
	
}


//===========================================================================
/*!	@brief	初期化
	@param	near			どこから表示するか
	@param	far				どこまで表示するか
	@param	fieldOfVision	視野角
	@return	なし
*/
//===========================================================================
bool Camera::Initialize( f32 near, f32 far, f32 fieldOfVision )
{
	m_fieldOfVision		= fieldOfVision;
	m_near				= near;
	m_far				= far;

	return true;
}
	

//===========================================================================
/*!	@brief	位置ベクトルをセット
	@param	pos	: 位置
	@return	なし
*/
//===========================================================================
void Camera::SetPos(const nk::math::Vector &pos)
{
	m_pos = pos;
}


//===========================================================================
/*!	@brief	位置を取得
	@param	なし
	@return	位置
*/
//===========================================================================
math::Vector Camera::GetPos() const
{
	return m_pos;
}



//===========================================================================
/*!	@brief	視点ベクトルをセット
	@param	look	: 視点
	@return	なし
*/
//===========================================================================
void Camera::SetLook( const nk::math::Vector &look )
{
	m_look = look;
}


//===========================================================================
/*!	@brief	視点ベクトルを取得
	@param	なし
	@return	視点
*/
//===========================================================================
math::Vector Camera::GetLook() const
{
	return m_look;
}



//===========================================================================
/*!	@brief	上方向ベクトルをセット
	@param	top	: 上方向ベクトル
	@return	なし
*/
//===========================================================================
void Camera::SetTop( const nk::math::Vector &top )
{
	m_top = top;
}


//===========================================================================
/*!	@brief	上方向ベクトルを取得
	@param	なし
	@return	上方向ベクトル
*/
//===========================================================================
math::Vector Camera::GetTop() const
{
	return m_top;
}


//===========================================================================
/*!	@brief		見えはじめの距離を設定
	@param		near	距離
	@return		----
*/
//===========================================================================
void Camera::SetNearDistance( f32 near )
{
	m_near	= near;
}


//===========================================================================
/*!	@brief		見えなくなる距離を設定
	@param		far	距離
	@return		----
*/
//===========================================================================
void Camera::SetFarDistance( f32 far )
{
	m_far	= far;
}



//===========================================================================
/*!	@brief		視野角を設定
	@param		deg		角度
	@return		----
*/
//===========================================================================
void Camera::SetFieldOfVision( f32 deg )
{
	m_fieldOfVision	= deg;
}


//===============通常カメラ===============


//===========================================================================
/*!	@brief	コンストラクタ
	@param	なし
*/
//===========================================================================
NormalCamera::NormalCamera() : Camera()
{
	
}


//===========================================================================
/*!	@brief	デストラクタ
	@param	
*/
//===========================================================================
NormalCamera::~NormalCamera()
{
	
}


//===========================================================================
/*!	@brief	カメラ行列を取得
	@param	なし
	@return	カメラ行列
*/
//===========================================================================
math::Matrix44 NormalCamera::GetCameraMatrix()
{
	math::Vector F( m_look - m_pos );
	F.Normalize();
	
	math::Vector camUp( m_top );
	camUp.Normalize();

	math::Vector S = math::CalcCrossProduct( F, camUp );
	S.Normalize();

	math::Vector U = math::CalcCrossProduct( S, F );
	U.Normalize();


	math::Matrix44 ret(
		S.x,	U.x,	-F.x,	0.0f,
		S.y,	U.y,	-F.y,	0.0f,
		S.z,	U.z,	-F.z,	0.0f,
		0,		0,		0,		1.0f);

	math::Matrix44 trans(
		1,			0,			0,			0,
		0,			1,			0,			0,
		0,			0,			1,			0,
		-m_pos.x,	-m_pos.y,	-m_pos.z,	1);

	ret = ret * trans;


	return ret;
}







}	// namespace system
}	// namespace nk

