//=============================================================================
/*!	@file	layoutParts.h

	@brief	レイアウトパーツ

	@author	ryunosuke ide
	@date	2013.06.09
*/
//=============================================================================
//-------------------------------インクルード-------------------------------
#include <stdlib.h>

#include "../../include/graphics/layoutParts.h"

#include "../../include/utility/utility.h"
#include "../../include/utility/stringfunction.h"

//--------------------------------define定義--------------------------------



//--------------------------------static変数--------------------------------
namespace {

}	// unnamed

//--------------------------------static関数--------------------------------
namespace {

}	// unnamed

//---------------------------------関数定義---------------------------------


namespace nk {
namespace graphics {

//===========================================================================
/*!	@brief	コンストラクタ
	@param	----
*/
//===========================================================================
LayoutParts::LayoutParts()
{
	_Init();
}


//===========================================================================
/*!	@brief	デストラクタ
	@param	----
*/
//===========================================================================
LayoutParts::~LayoutParts()
{
	_Term();
}


//===========================================================================
/*!	@brief	初期化
	@param	----
	@return	----
*/
//===========================================================================
void LayoutParts::_Init( void )
{
	
	memset( m_name, 0, sizeof(m_name) );
	m_active	= true;
	m_visible	= true;
}


//===========================================================================
/*!	@brief	終了処理
	@param	----
	@return	----
*/
//===========================================================================
void LayoutParts::_Term( void )
{
	
}


//===========================================================================
/*!	@brief		パーツ名設定
	@param		name	パーツ名
	@return		----
*/
//===========================================================================
void LayoutParts::SetName( const char* name )
{
	strcpy_s( m_name, sizeof( m_name ), name );
	
}

//===========================================================================
/*!	@brief		パーツ名取得
	@param		----
	@return		----
*/
//===========================================================================
const char* LayoutParts::GetName( void ) const
{
	
	return m_name;
}

//===========================================================================
/*!	@brief		パーツ名が同じならtrueを返す
	@param		name	パーツ名
	@return		----
*/
//===========================================================================
bool LayoutParts::IsSameName( const char* name ) const
{
	const bool	result	= Compare( GetName(), name );
	
	return result;
}

	
//===========================================================================
/*!	@brief		タグ名取得
	@param		----
	@return		----
*/
//===========================================================================
const char* LayoutParts::GetTagName( void ) const
{
	return m_tagName;
}


//===========================================================================
/*!	@brief		タグ名設定
	@param		tagname		タグ名
	@return		----
*/
//===========================================================================
void LayoutParts::SetTagName( const char* tagname )
{
	strcpy_s( m_tagName, sizeof(m_tagName), tagname );
	
}


//===========================================================================
/*!	@brief		アクティブ設定
	@param		active	true.アクティブ	false.非アクティブ
	@return		----
*/
//===========================================================================
void LayoutParts::SetActive( bool active )
{
	m_active	= active;
	
}

//===========================================================================
/*!	@brief		アクティブならtrueを返す
	@param		----
	@return		----
*/
//===========================================================================
bool LayoutParts::IsActive( void ) const
{

	return m_active;
}

//===========================================================================
/*!	@brief		表示設定
	@param		visible		true.表示	false.非表示
	@return		----
*/
//===========================================================================
void LayoutParts::SetVisible( bool visible )
{
	m_visible	= visible;
	
}


//===========================================================================
/*!	@brief		表示ならtrueを返す
	@param		----
	@return		----
*/
//===========================================================================
bool LayoutParts::IsVisible( void ) const
{
	
	return m_visible;
}


//===========================================================================
/*!	@brief		位置設定
	@param		pos		設定位置
	@return		----
*/
//===========================================================================
void LayoutParts::SetPos( const math::Vector& pos )
{
	m_pos	= pos;
}



//===========================================================================
/*!	@brief		位置設定
	@param		x		x座標
	@param		y		y座標
	@return		----
*/
//===========================================================================
void LayoutParts::SetPos( s32 x, s32 y )
{
	m_pos	= math::Vector( static_cast<f32>(x), static_cast<f32>(y), 0.0f );
}


//===========================================================================
/*!	@brief		位置取得
	@param		----
	@return		----
*/
//===========================================================================
math::Vector LayoutParts::GetPos( void ) const
{
	
	return m_pos;
}



//===========================================================================
/*!	@brief		サイズ設定
	@param		size		サイズ
	@return		----
*/
//===========================================================================
void LayoutParts::SetSize( const math::Vector& size )
{
	m_size	= size;
}



//===========================================================================
/*!	@brief		位置設定
	@param		w		幅
	@param		h		高さ
	@return		----
*/
//===========================================================================
void LayoutParts::SetSize( s32 w, s32 h )
{
	m_size	= math::Vector( static_cast<f32>(w), static_cast<f32>(h), 0.0f );
}


//===========================================================================
/*!	@brief		位置取得
	@param		----
	@return		----
*/
//===========================================================================
math::Vector LayoutParts::GetSize( void ) const
{
	
	return m_size;
}


	
}	// namespace graphics
}	// namespace nk