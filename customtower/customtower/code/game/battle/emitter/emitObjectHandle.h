//=============================================================================
/*!	@file	emitObjectHandle.h

	@brief	エミッターに出力されたオブジェクトのハンドル

	@author	ryunosuke ide
	@date	2013.07.03
*/
//=============================================================================


#ifndef __EMIT_OBJECT_HANDLE_H__
#define __EMIT_OBJECT_HANDLE_H__


namespace game {
namespace battle {



//=============================================================================
/*!
					エミッターによって出力されたオブジェクト
*/
//=============================================================================
template<typename T>
class EmitObjectHandle {
public:
	//-----------------------型定義--------------------------
	

	//----------------------静的メンバ-----------------------
	
	
	//-----------------------メソッド------------------------

	//===========================================================================
	/*!	@brief		オブジェクトの登録
	*/
	//===========================================================================
	void	Register( T* obj )
	{
		m_obj	= obj;
		m_dead	= false;
	}

	//===========================================================================
	/*!	@brief		生存時間設定
		@param		0設定で無限
	*/
	//===========================================================================
	void	SetLife( s64 frame )
	{
		m_lifeFrame	= frame;
	}

	//===========================================================================
	/*!	@brief		更新
	*/
	//===========================================================================
	void	Update( void )
	{
		if( m_dead == false ) {
			if( 0 < m_lifeFrame ) {
				++m_updateCount;
				if( m_lifeFrame <= m_updateCount ) {
					m_dead	= true;
				}
			}
		}
	}

	//===========================================================================
	/*!	@brief		登録オブジェクト取得
	*/
	//===========================================================================
	T*		GetRegisteredObject( void )
	{
		return m_obj;
	}

	//===========================================================================
	/*!	@brief		死んだらtrue
	*/
	//===========================================================================
	bool	IsDead( void ) const
	{
		return m_dead;
	}
	
private:
	//-----------------------メソッド------------------------
	void	_Init( void )
	{
		m_obj			= NULL;
		m_lifeFrame		= 0;
		m_updateCount	= 0;
		m_dead			= true;
	}
	
	void	_Term( void )
	{
	}

	//----------------------メンバ変数-----------------------
	T*				m_obj;				//!< 登録オブジェクト
	s64				m_updateCount;		//!< 更新カウンタ
	s64				m_lifeFrame;		//!< 生存フレーム
	bool			m_dead;				//!< 死亡
	
public:
	//-------------コンストラクタ・デストラクタ--------------
			EmitObjectHandle() { _Init(); }
			EmitObjectHandle( T* obj ) { _Init(); Register( obj ); }
	virtual~EmitObjectHandle() { _Term(); }
};
	
}	// namespace battle
}	// namespace game




#endif  // __EMIT_OBJECT_HANDLE_H__