//=============================================================================
/*!	@file	sceneInterface.h

	@brief	シーンインターフェース

	@author	ryunosuke ide
	@date	2013.05.19
*/
//=============================================================================


#ifndef __SCENE_INTERFACE_H__
#define __SCENE_INTERFACE_H__

#include "render/renderModel.h"
#include "game/gameObjectManager.h"



namespace game {

class SceneManager;

//=============================================================================
/*!
							シーンインターフェース
*/
//=============================================================================
class SceneInterface : public GameObject, public RenderObject {
public:
	//-----------------------型定義--------------------------
	static const	s32	MAX_TREE_NUM	= 128;	//!< 接続枝数

	//! メッセージ
	enum {
		MESSAGE_NONE,		//!< 無し
		MESSAGE_USER,		//!< ユーザーメッセージはこの数以上を設定する
	};
	

	//----------------------静的メンバ-----------------------
	
	
	//-----------------------メソッド------------------------

	//===========================================================================
	/*!	@brief		更新
	*/
	//===========================================================================
	virtual void	Execute( s32 parentMessage );

	//===========================================================================
	/*!	@brief		描画
	*/
	//===========================================================================
	virtual void	RenderLocal( void ) {}

	//===========================================================================
	/*!	@brief		描画
	*/
	//===========================================================================
	virtual void	Render( void );
	
	//===========================================================================
	/*!	@brief		ツリー生成
	*/
	//===========================================================================
	virtual void	CreateTree( SceneInterface* parent ) {}

	//===========================================================================
	/*!	@brief		ツリー削除
		@note		デフォルトでは m_children に対して DeleteTree() を行い、
					その後 DeleteResource() を呼び出します
	*/
	//===========================================================================
	virtual void	DeleteTree( SceneInterface* parent );

	//===========================================================================
	/*!	@brief		初期化
	*/
	//===========================================================================
	virtual void	InitializeScene( SceneInterface* parent ) {}

	//===========================================================================
	/*!	@brief		終了
	*/
	//===========================================================================
	virtual void	TerminateScene( SceneInterface* parent ) {}
		
	//===========================================================================
	/*!	@brief		ID設定
	*/
	//===========================================================================
	void			SetID( s32 id );
	
	//===========================================================================
	/*!	@brief		ID取得
	*/
	//===========================================================================
	s32				GetID( void ) const;
	
	//===========================================================================
	/*!	@brief		子供を追加
	*/
	//===========================================================================
	void			ConnectChild( SceneInterface* child );

	//===========================================================================
	/*!	@brief		子供を切り離す
	*/
	//===========================================================================
	void			DisconnectChild( SceneInterface* child );
	
	//===========================================================================
	/*!	@brief		アクティブならtrueを返す
	*/
	//===========================================================================
	bool			IsActive( void ) const;

	//===========================================================================
	/*!	@brief		アクティブ状態をセット
	*/
	//===========================================================================
	void			SetActive( bool state );

	//===========================================================================
	/*!	@brief		初期化が終わったらtrueを返す
	*/
	//===========================================================================
	virtual bool	IsInitializeEnd( void ) const { return true; }

	//===========================================================================
	/*!	@brief		シーン管理を紐付け
	*/
	//===========================================================================
	void			SetSceneManager( SceneManager* sceneManager );

	//===========================================================================
	/*!	@brief		シーン管理取得
	*/
	//===========================================================================
	SceneManager*	GetSceneManager( void ) const;
	
protected:
	//===========================================================================
	/*!	@brief		ローカル更新
		@return		子供へのメッセージ
	*/
	//===========================================================================
	virtual s32		ExecuteLocal( s32 parentMessage ) { return MESSAGE_NONE; }
	
	
private:
	//-----------------------メソッド------------------------
	void	_Init();
	void	_Term();

	//----------------------メンバ変数-----------------------
	std::vector<SceneInterface*>	m_children;				//!< シーンツリー
	s32								m_id;					//!< シーンID
	bool							m_active;				//!< アクティブ

	SceneManager*					m_sceneManager;			//!< シーン管理

public:
	//-------------コンストラクタ・デストラクタ--------------
			SceneInterface();
	virtual~SceneInterface();
};

	
}	// namespace game




#endif  // __SCENE_INTERFACE_H__