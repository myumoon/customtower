//=============================================================================
/*!	@file	renderObjectManager.h

	@brief	描画オブジェクト管理

	@author	ryunosuke ide
	@date	2013.06.03
*/
//=============================================================================

//-------------------------------インクルード-------------------------------
#include "renderObjectManager.h"

#include "renderObject.h"

//--------------------------------define定義--------------------------------



//--------------------------------static変数--------------------------------
namespace {

}	// unnamed

//--------------------------------static関数--------------------------------
namespace {

}	// unnamed

//---------------------------------関数定義---------------------------------


//===========================================================================
/*!	@brief	コンストラクタ
	@param	----
*/
//===========================================================================
RenderObjectManager::RenderObjectManager()
{
	_Init();
}


//===========================================================================
/*!	@brief	デストラクタ
	@param	----
*/
//===========================================================================
RenderObjectManager::~RenderObjectManager()
{
	_Term();
}


//===========================================================================
/*!	@brief	初期化
	@param	----
	@return	----
*/
//===========================================================================
void RenderObjectManager::_Init( void )
{
	RenderObject::renderObjectManager	= this;
}


//===========================================================================
/*!	@brief	終了処理
	@param	----
	@return	----
*/
//===========================================================================
void RenderObjectManager::_Term( void )
{

}


//===========================================================================
/*!	@brief		登録
	@param		rendObj	登録するレンダリングオブジェクト
	@return		----
*/
//===========================================================================
void RenderObjectManager::Register( RenderObject* rendObj )
{
	m_renderObjects.push_back( rendObj );
	
}




//===========================================================================
/*!	@brief		解除
	@param		rendObj	解除するレンダリングオブジェクト
	@return		----
*/
//===========================================================================
void RenderObjectManager::Remove( RenderObject* rendObj )
{
	std::vector<RenderObject*>::iterator	itr	= m_renderObjects.begin();
	for( ; itr != m_renderObjects.end(); ++itr ) {
		if( *itr == rendObj ) {
			m_renderObjects.erase( itr );
			break;
		}
	}
	
}


//===========================================================================
/*!	@brief		解除
	@param		----
	@return		----
*/
//===========================================================================
void RenderObjectManager::RemoveAll( void )
{
	m_renderObjects.clear();
	
}


//===========================================================================
/*!	@brief		描画
	@param		----
	@return		----
*/
//===========================================================================
void RenderObjectManager::Render( void )
{
	for( u32 i = 0; i < m_renderObjects.size(); ++i ) {
		m_renderObjects[i]->Render();
	}
	
}
