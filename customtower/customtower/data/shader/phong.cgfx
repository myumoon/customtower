/////////////////////////////////////////////////////////////
//グローバル変数
/////////////////////////////////////////////////////////////
float4x4	WorldViewProj;		// ワールドビュープロジェクション行列
float4x4	World;
float3		LightVec;			// 光源方向ベクトル
float3		CameraPos;			// カメラの位置

float4		g_diff	= {1.0, 1.0, 1.0, 1.0};	//ディフェーズ
float4		g_amb	= {0.5, 0.5, 0.5, 1.0};	//アンビエント
float		g_power	= 4.0;					//光沢の強さ

// テクスチャ
sampler2D DecalTex = sampler_state {
	minFilter = Linear;
	magFilter = Linear;
	mipFilter = NONE;
};


/////////////////////////////////////////////////////////////
// 入出力構造体定義
/////////////////////////////////////////////////////////////

//C++アプリから頂点シェーダーへの入力構造体
struct AppToVertex
{
	float4 Position : POSITION;
	float4 Normal	: NORMAL;
	float2 Texcoord	: TEXCOORD0;
};


//頂点シェーダーからフラグメントシェーダーへの出力構造体
struct VertexToFragment
{
	float4 Position : POSITION;
	float2 Texcoord	: TEXCOORD0;
	float4 Color0	: COLOR0;
	float4 Color1	: COLOR1;
};

//フラグメントシェーダーの出力構造体
struct FragOut
{
	float4 Col		: COLOR;
};



//////////////////////////////////////////////////////////
// 頂点シェーダー
//////////////////////////////////////////////////////////
VertexToFragment phongVs(AppToVertex IN)
{
	VertexToFragment OUT = (VertexToFragment)0;
	

	// 出力座標
	OUT.Position = mul(WorldViewProj, IN.Position);
		
	// ワールド座標系での法線ベクトル
	float3 normal = mul(IN.Normal, World);
	
	// ライト方向を反転
	float3 light = -LightVec;

	// 視線ベクトル
	float3 eye = normalize(CameraPos.xyz - OUT.Position.xyz);
	
	// 反射ベクトル
	float3 R = -eye + 2.0f * dot(normal, eye) * normal;

	// テクスチャと合成を行う色
	OUT.Color0 = g_diff * max(g_amb, dot(normal, light));
	OUT.Color1 = pow( max(0.0f, dot( light, R) ), g_power );

	// UV座標はそのままフラグメントシェーダーに送る	
	OUT.Texcoord = IN.Texcoord;
	
	
	return OUT;
}





///////////////////////////////////////////////////////////
// フラグメントシェーダー
///////////////////////////////////////////////////////////
FragOut phongFs(VertexToFragment IN)
{
	FragOut OUT = (FragOut)0;
		

	// テクスチャから色を拾ってくる
	float4 TexColor = f4tex2D(DecalTex, IN.Texcoord);

	// 最終的な色	
	OUT.Col = IN.Color0 * TexColor + IN.Color1 * TexColor;


	return OUT;
}




///////////////////////////////////////////////////////////
// テクニックの定義
///////////////////////////////////////////////////////////
technique Phong {
	pass {
		// フラグメントシェーダー
		FragmentProgram = compile arbfp1 phongFs();
		
		// 頂点シェーダー
		VertexProgram = compile arbvp1 phongVs();
	}
}
